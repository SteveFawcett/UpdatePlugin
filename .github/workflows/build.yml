name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

permissions:
  contents: write

defaults:
  run:
    shell: pwsh
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  OutputDirectory: ${{ github.workspace }}\artifacts
  Version: ${{ github.ref_name }}
  PluginName: UpdatePlugin

jobs:

  build:
    strategy:
      matrix:
        configuration: [ Release]

    runs-on: windows-latest 
      
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Get version from tag
      id: get_version
      if: github.event_name == 'release'
      uses: jannemattila/get-version-from-tag@v4

    - name: Resolve Version
      run: |
          if ("${{ github.event_name }}" -eq "release") {
              $version = "${{ steps.get_version.outputs.version }}"
          } else {
              $version = Get-Date -Format "yyyy.MM.dd"
          }
          echo "Version=$version" >> $env:GITHUB_ENV

    - name: Ensure artifacts folder exists
      run: mkdir -Force "${{ env.OutputDirectory }}"

    - name: Package into ZIP
      run: dotnet msbuild
             -restore
             -t:Publish
             -p:Configuration=${{ matrix.configuration }} 
             -p:OutputDirectory="${{ env.OutputDirectory }}" 
             -p:AssemblyVersion="${{ env.Version }}"

    - name: Upload Artifact via GitHub CLI
      if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      run: |
        gh release upload ${{ github.event.release.tag_name }} ${{ env.OutputDirectory }}/${{env.PluginName}}-v${{ env.Version }}.zip --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 
      
